[gcode_macro _CLIENT_VARIABLE]
gcode:
  variable_use_fw_retract   : True

[gcode_macro FILAMENT_CHANGE]
gcode:
  G28
  G90
  G1 X135.00 F6000
  G1 Y0.00 F6000
  G1 Z+50 F1500

[gcode_macro FILAMENT_CHANGE_PURGE]
gcode:
  M109 S250
  G92 E0
  G91 ; Set positioning to Relative
  G1 E500 F3600
  G1 E200 F360
  G92 E0 ; Reset Extruder
  G90 ; Set Position to Absolute
  G1 X0 Y0 F6000 ; Park print head
  M106 S0 ; Turn off part fan
  M104 S0 ; Set nozzle temp to zero
  M140 S0 ; set bed temp to zero
  M84 X Y E ; Disable X Y and E steppers

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  M400 ; wait for buffer to clear
  G92 E0 ; zero the extruder
  {% if printer[printer.toolhead.extruder].target > 220 %}
      G1 E-2.0 F3600 ; retract filament PETG
  {% else %}
      G1 E-1.0 F3600 ; retract filament PLA
  {% endif %}
  TURN_OFF_HEATERS
  G91 ; relative positioning
  G1 Z4 F3000 ; move nozzle up 2mm
  G90 ; absolute positioning
  G28 X
  G28 Y
  G0 X345 Y345
  CLEAR_PAUSE
  M107 ; turn off fan
  BED_MESH_CLEAR
  BASE_CANCEL_PRINT
  
[gcode_macro PID_EXTRUDER]
gcode:
 M106 S255
 {% set TARGET_TEMP = params.TARGET_TEMP|default(210)|float %} 
 PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
 SAVE_CONFIG

[gcode_macro PID_BED]
gcode:
 {%set TARGET_TEMP = params.TARGET_TEMP|default(70)|float %}
 PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
 SAVE_CONFIG

[gcode_macro Unload]
gcode:
  G28
  G90
  G1 Z25 F360
  G1 X165 Y165 F7200
  M109 S230
  G91 ; Set positioning to Relative
  G1 E5 F120
  G1 E-755 F3600
  G1 E-50 F360
  G92 E0 ; Reset Extruder
  G90 ; Set Position to Absolute
  G1 X0 Y0 F6000 ; Park print head
  M106 S0 ; Turn off part fan
  M104 S0 ; Set nozzle temp to zero
  M140 S0 ; set bed temp to zero
  M84 X Y E ; Disable X Y and E

[gcode_macro MOVE_TO_NEUTRAL_POSITION]
gcode:
  g28; home all axis
  g90; set to absolute positioning
  g1 x175 y175 f9000
  g1 z100 f3000
  M83; set extruder to relative positioning

[gcode_macro _Z_TILT_MAYBE]
gcode:
  {% if printer["gcode_macro Z_TILT_ADJUST"].adjusted != 1 %}
    Z_TILT_ADJUST
  {% else %}
    {action_respond_info("Z tilt already adjusted, skipping.")} 
  {% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing: OG_Z_TILT_ADJUST
variable_adjusted: 0
gcode:
  G28
  OG_Z_TILT_ADJUST
  G28 Z
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=1

[gcode_macro M18]
rename_existing: M1800
gcode:
  M1800
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=0

[gcode_macro M84]
rename_existing: M8400
gcode:
  M8400
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=0

[gcode_macro Z_OFFSET]
gcode:
  g28; home all axis
  PROBE_CALIBRATE

[gcode_macro Z_CHECK]
gcode:
  g28; home all axis
  PROBE_ACCURACY

[gcode_macro INPUTSHAPER_X]
gcode:
  M84
  G90
  G28
  SHAPER_CALIBRATE AXIS=x
  SAVE_CONFIG

[gcode_macro INPUTSHAPER_Y]
gcode:
  M84
  G90
  G28
  SHAPER_CALIBRATE AXIS=y
  SAVE_CONFIG

[gcode_macro Direct_PA_Tunning]
gcode:
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
  TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005

[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
  
##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
  
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro M141]
gcode:
    {% set s = params.S|default(0)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={s}